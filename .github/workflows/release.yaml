# SPDX-FileCopyrightText: Copyright 2025 Carabiner Systems, Inc
# SPDX-License-Identifier: Apache-2.0

name: release

on:
  push:
    tags:
      - 'v*'
permissions:
  contents: read
  
jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write     # To create the release
      id-token: write     # To sign artifacts
      attestations: write # To push attestations
      
    steps:
      - name: Setup Docker
        uses: docker/setup-docker-action@b60f85385d03ac8acfca6d9996982511d8620a19 # v4.3.0

      - name: Setup bnd
        uses: carabiner-dev/actions/install/bnd@HEAD

      - name: Setup unpack
        uses: carabiner-dev/actions/install/unpack@HEAD

      - uses: imjasonh/setup-crane@31b88efe9de28ae0ffa220711af4b60be9435f6e # 0.4

      - uses: kubernetes-sigs/release-actions/setup-tejolote@a30d93cf2aa029e1e4c8a6c79f766aebf429fddb # v0.3.1
        with:
          tejolote-release: '0.4.1'

      - uses: openvex/setup-vexctl@main
        with:
          vexctl-release: '0.4.1'

      - name: Check out code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
          fetch-depth: 1

      - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: go.mod
          cache: false

      - id: att-repo
        name: Create Attestation Directory
        run: mkdir .attestations

      ###
      ###  Source Verification
      ###

      - name: 🔴🟡🟢 Verify Build Point Commit to be SLSA Source Level 3+
        uses: carabiner-dev/actions/ampel/verify@HEAD
        with:
          subject: "sha1:${{ github.sha }}"
          policy: "git+https://github.com/carabiner-dev/policies#vsa/slsa-source-level1.json"
          collector: "note:https://github.com/${{ github.repository }}@${{ github.sha }}"
          signer: "sigstore::https://token.actions.githubusercontent.com::https://github.com/slsa-framework/source-actions/.github/workflows/compute_slsa_source.yml@refs/heads/main"
          attest: false

      - name: 🥨 Export source attestations
        id: export-source-attestations
        run: |
          bnd read note:${{ github.repository }}@${{ github.sha }} --jsonl >> .attestations/attestations.bundle.jsonl
          echo "" >> .attestations/attestations.bundle.jsonl

      ###
      ###  Source Verification
      ###
      
      - name: 📜 Generate SBOM
        run: |
          unpack extract . --ignore-other-codebases -f spdx --attest > .attestations/spdx.intoto.json
          bnd statement .attestations/spdx.intoto.json >> .attestations/attestations.bundle.jsonl
          echo "" >> .attestations/attestations.bundle.jsonl

      - name: 🧪 Attest Test Results
        uses: carabiner-dev/actions/beaker/tests@HEAD
        with:
          output: .attestations/tests.intoto.json
          sign: true

      - name: Read builder digest
        id: digests
        run:
          echo "builder=$(crane digest cgr.dev/chainguard/go)" >> "$GITHUB_OUTPUT"

      - name: 🔴🟡🟢 Verify Builder Image
        uses: carabiner-dev/actions/ampel/verify@HEAD
        with:
          # The verification subjest: The image digest
          subject: "${{ steps.digests.outputs.builder }}"
          # Use the modified policy set
          policy: "git+https://github.com/${{ github.repository }}#policies/fritoto-verify-builder.hjson"
          # Collect builder attestations attached to the image
          collector: "coci:cgr.dev/chainguard/go"
          # We don't specify the signer here, it's baked in the policy
          # signer: "sigstore::https://token.actions.githubusercontent.com::https://github.com/slsa-framework/source-actions/.github/workflows/compute_slsa_source.yml@refs/heads/main"
          attest: false

      - name: 🔴🟡🟢 Re-Verify to Generate Builder VSA
        # Here, we run the verification again just to generate the VSA as required.
        # By the SLSA e2e RFE. This should probably be an option in the verify 
        # action but we don't currently have a way of doing it.
        run: |
          echo "$HOME/.carabiner/bin" >> $GITHUB_PATH
          $HOME/.carabiner/bin/ampel verify ${{ steps.digests.outputs.builder }} \
          --policy "git+https://github.com/${{ github.repository }}#policies/fritoto-verify-builder.hjson" \
          -c coci:cgr.dev/chainguard/go --format="vsa" >> .attestations/builder-vsa.intoto.json
          
          bnd statement .attestations/builder-vsa.intoto.json >> .attestations/attestations.bundle.jsonl
          echo "" >> .attestations/attestations.bundle.jsonl

          rm .attestations/builder-vsa.intoto.json

      - name: Set tag output
        id: tag
        run: echo "tag_name=${GITHUB_REF#refs/*/}" >> "$GITHUB_OUTPUT"
  
      - name: Generate Vulnerability Scan
        uses: google/osv-scanner-action/osv-scanner-action@e92b5d07338d4f0ba0981dffed17c48976ca4730 # v2.2.3
        continue-on-error: true
        with:
          scan-args: |-
            --output=.attestations/osv-results.json 
            --format=json
            .

      - name: 🪿 Generate VEX Statements
        id: generate-vex
        run: |
          vexctl create \
            --product="sha1:${{ github.sha }}" \
            --subcomponents="pkg:golang/github.com/aws/aws-sdk-go@v1.44.122" \
            --vuln CVE-2020-8911 \
            -s not_affected -j vulnerable_code_not_in_execute_path \
            --impact-statement="Module imported manually for demo purposes" \
            --author "Carabiner Systems, Inc (hey@carabiner.dev)" >> .attestations/CVE-2020-8911.openvex.json

          vexctl create \
            --product="sha1:${{ github.sha }}" \
            --subcomponents="pkg:golang/github.com/aws/aws-sdk-go@v1.44.122" \
            --vuln CVE-2020-8912 \
            -s not_affected -j vulnerable_code_not_in_execute_path \
            --impact-statement="Module imported manually for demo purposes" \
            --author "Carabiner Systems, Inc (hey@carabiner.dev)" >> .attestations/CVE-2020-8912.openvex.json

          bnd predicate .attestations/CVE-2020-8911.openvex.json \
            --type="https://openvex.dev/ns/v0.2.0" --subject="sha1:${{ github.sha }}" >> .attestations/attestations.bundle.jsonl
          echo "" >> .attestations/attestations.bundle.jsonl

          bnd predicate .attestations/CVE-2020-8912.openvex.json \
            --type="https://openvex.dev/ns/v0.2.0" --subject="sha1:${{ github.sha }}" >> .attestations/attestations.bundle.jsonl
          echo "" >> .attestations/attestations.bundle.jsonl

      - name: 🥨 Pack Remaining Attestations
        run: |
          # Sign the vulnerability scan
          bnd predicate .attestations/osv-results.json  \
            --type="https://ossf.github.io/osv-schema/results@v1.6.7" \
            --subject="sha1:${{ github.sha }}" >> .attestations/attestations.bundle.jsonl
          echo "" >> .attestations/attestations.bundle.jsonl

          # Bundle the remaining atts
          bnd pack -o .attestations/rest.bundle.json .attestations/tests.intoto.json

          cat .attestations/rest.bundle.json >> .attestations/attestations.bundle.jsonl
          echo "" >> .attestations/attestations.bundle.jsonl

      # Gate the build enforcin the preflight policy
      - name: 🔴🟡🟢 Run Release Pre-flight Verification
        uses: carabiner-dev/actions/ampel/verify@HEAD
        with:
          subject: "sha1:${{ github.sha }}"
          policy: "git+https://github.com/${{ github.repository }}#policies/fritoto-gate-build.hjson"
          collector: "jsonl:.attestations/attestations.bundle.jsonl"
          attest: false

      ## Run the build script
      - name: 👷‍♀️ Build the Project
        id: build
        run: |
          ./build.sh

      # Here, we fen
      - name: 🌶️ Generate SLSA Provenance Attestation
        id: tejolote        
        run: |
            # Generate the provenance attestation with the Tejolote attester
            tejolote attest github://${{github.repository}}/"${GITHUB_RUN_ID}" \
              --artifacts file:$(pwd)/bin/ \
              --output .attestations/provenance.json --slsa="1.0" \
              --vcs-url=cgr.dev/chainguard/go@${{ steps.digests.outputs.builder }}

            # Sign the provenance attestation
            bnd statement .attestations/provenance.json >> .attestations/attestations.bundle.jsonl
            echo "" >> .attestations/attestations.bundle.jsonl

      - name: 🔴🟡🟢 Verify All Artifacts and Generate VSAs
        id: artifact-vsas
        run: |
            echo "$HOME/.carabiner/bin" >> $GITHUB_PATH
            ls -l bin/
            for binfile in $(ls bin/*); 
            do ampel verify "$binfile" \
               --policy "git+https://github.com/${{ github.repository }}#policies/fritoto-gate-publish.hjson" \
               --collector jsonl:.attestations/attestations.bundle.jsonl \
               --attest-results --attest-format=vsa --results-path=vsa.tmp.json \
               --context "vsa.resourceUri:https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag_name }}/${binfile#"bin/"}" \
               --format=html >> $GITHUB_STEP_SUMMARY;

               bnd statement vsa.tmp.json >> .attestations/attestations.bundle.jsonl;
               echo "" >> .attestations/attestations.bundle.jsonl;
               rm -f vsa.tmp.json;
            done

      - name: Store Attestations in Artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: attestations.bundle.jsonl
          path: .attestations/attestations.bundle.jsonl

      - name: 🏁 Publish Release and Upload Assets
        id: publish
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}       
        run: |
          gh release create ${{ steps.tag.outputs.tag_name }} --generate-notes --latest
          gh release upload ${{ steps.tag.outputs.tag_name }} .attestations/attestations.bundle.jsonl
          for binfile in $(ls bin/*);  do gh release upload ${{ steps.tag.outputs.tag_name }} "$binfile"; done
          

